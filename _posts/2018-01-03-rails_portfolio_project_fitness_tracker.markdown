---
layout: post
title:      "Rails Portfolio Project: Fitness Tracker"
date:       2018-01-03 22:13:52 -0500
permalink:  rails_portfolio_project_fitness_tracker
---

   I have just wrapped up my Rails portfolio project, so the time has come to write up a review. For this project, I chose to make a fitness app, with open-sourced workout routines and the option of making an account, similar to countless sites I frequented in my late teens. However, I decided to give it a slight social-media era twist, allowing users to create and track personal fitness goals, and to view the fitness goals and personalized workout routines of other users. 
		Upon entering the site, a user is directed immediately to the workout routines index page, where they can view the details of each routine.  A navbar at the top of the page allows a user to sign up, sign in, or sign in with google, my chosen omniauth provider. Links below each workout routine route to its show page, where the exercises that make up that routine can be seen in detail. Once on the show page, A logged in user can choose to save the routine as a fitness plan in his/her personal dashboard, or can view his/her personal dashboard. 
		Should a user choose to save the routine, they can optionally add a duration to the fitness plan, which states the length of time the user plans to follow this routine. Upon creation, the user will be routed to his/her show page, where they and other users can view their routines, their fitness goals, and can create new fitness goals. All fitness goals are initialized as "in progress," but a logged in user can toggle his/her personal goals to "accomplished," marking their progress for all to see. 
		There are a few things worth noting about the process of creating this app. All throughout the RoR curriculum, I had project ideas in the back of my mind, but I kept coming to the same question, time and time again: How would I differentiate this project from my Sinatra project? In other words, what would RoR allow me to do that Sinatra did not? By the time I was ready to work on the project, it was clear to me that the answer was: not all that much. My Rails education offered me many useful programming tips and tidbits, and no doubt, the code in this project is far more manageable, readable, and extensible than my Sinatra project. It follows far more best practices, and involves things like validations and nested resources, instead of the far WETter logic in Sinatra. But, all of this deals with the PROGRAMMER'S experience. As far as the user, who presumably knows nothing about programming and will never see the source code, is concerned, the app is in no way more functional or more advanced than my Sinatra Fantasy Football app. This brought me to a fundamental lesson about coding in general: so much of what we do as programmers relates to how we and future coders with deal with our app, and not how a user will interact with it. 
		Beyond that, it is worth noting that, despite warnings to the contrary, I decided to use Devise to set up my users, and it caused me many headaches as I tried to figure what was hidden behind its many curtains. However, looking back on it, I still feel that I may have saved time and energy as compared to building a sessions controller, and I  come away with an appreciation for Devise. It is not all that complicated, it just takes some getting used to. And of course, taking the time to read the documentation helps tremendously, reluctant as I have may have been to do that. 
		Over all, I am pleased with this app, although I must reiterate that from a user's standpoint, I would have hoped that it might be more distinguished from my Sinatra app than it turned out to be. I am excited to see how adding Javascript to the equation can revolutionize my apps in the future. 
