---
layout: post
title:      "CS 100.1 For Bootcamp Grads"
date:       2018-03-17 21:36:48 +0000
permalink:  cs_100_1_for_bootcamp_grads
---


Coming out of boot camp, you will quickly and inevitably come to a few conclusions. 

1) Finding a  job is hard. And stressful. Perhaps harder and more stressful than actually completing the boot camp in the first place. There are a lot of moving pieces involved in finding your first job in the industry, and while attending a boot camp is a fairly straightforward process of coding until your brain goes numb, it can be difficult to even know where to begin when looking for a job. Between filling out applications, nurturing connections, maintaining your online presence, and of course, keeping your coding skills sharp and relevant, the sheer magnitude of to-dos can quickly make your head spin. This leads in to realization number two. 

2)  You are competing against cs graduates for jobs. You are also competing against other boot camp grads. You are competing against people with more experience than you, more relevant experience than you, a wider breadth of skills than you, stronger cs fundamentals than you, and a whole host of other seemingly insurmountable obstacles. Despite being what many would call the most lucrative and fastest growing industry in the world, the tech scene can be deceptively hard to break into. One thing is for sure though. Amidst the sea of tasks that every aspiring developer must commit time and effort to, suring up one's computer science knowledge and problem solving ability is tantamount. 

Every position you apply to will be hotly contested. Should you land an interview, there will be others who do as well. No matter the company or role, some percentage of the interview process will consist of testing your fundamental computer science and problem solving ability. This is perhaps the most important thing for bootcamp grads to get through their heads. In the past, you have, by and large, been the only person that needed to work with your code. As long as it solved the problem it set out to solve and passed some test cases, it was considered good enough. But, in the real world, IT IS NOT ENOUGH FOR CODE TO SIMPLY "WORK". IT MUST BE EASY FOR OTHERS TO READ AND UNDERSTAND, AND OPTIMAL IN TERMS OF BOTH TIME AND SPACE.  I cannot stress this enough. If you do not spend a significant portion of your post bootcamp job-finding time on learning the ins and outs of computer science, you are setting yourself up for failure. 

To this end, I will be writing a series of blog posts intended to clarify some basic cs concepts for those with no cs background. To be clear, I am certainly no expert. As a recent bootcamp grad myself, I am just now familiarizing myself with many of these concepts. This will serve as much as anything as a platform for me to solidify my understandin by being forced to commit it to words, which I find can be one of the most effective methods: learning by teaching. That said, I believe this surface-level review can benefit those with as little cs knowledge as I had just a short time ago. 

Today, I will talk briefly about two of the simpler data structures you will need to know: stacks and queues. In computer science, these terms mean roughly what you would expect given their plain english definitions. The quintessential examples of  a stack are a real-life stack of books and a stack of cafeteria trays. Starting from the bottom, items are added on top, one by one, but only the top item can be removed at any given time. In this sense, stacks are LIFO, "last in, first out." The last item added to the stack is the only one that can be removed. This process can be repeated recursively until no items remain. 

Profoundly the opposite, then, are queues. A synonym for line, think of queues like a line in a grocery store or restaurant, or pretty much anywhere else, for that matter. Items are added to the back, and removed from the front, with each item moving forward in the line as others are removed. In this sense, they are FIFO, "first in first out." This is exactly the same as the plain english concept of first come, first served.  

These data structures are conceptually quite simple, but the types of problems they are optimal for solving are often not. When implemented in code, stacks and queues can be written as arrays that only support popping the appropriate element, or as linked lists. To fully understand this and many other cs topics, it is important to fully dive into what linked lists are and why they are used. This will be the subject of the next blog post, but for now, suffice it to say that are quite common in cs problems, and many algorithms and data structures rely on them. 

I hope this brief overview gives you a clearer sense of what stacks and queues are, and more importantly, that it motivates you to realize that without some basic cs knowledge, your career as a programmer is dead in the water. In the future, I will dive straight into covering fundamental algorithms and data structures, which hopefully will help elucidate this (stacks and queues) and other topics more fully. Stay tuned, good luck, and never give up!
