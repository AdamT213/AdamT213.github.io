---
layout: post
title:      "Final Project!!!"
date:       2018-02-15 14:55:54 -0500
permalink:  final_project
---

   And without further ado, my final project and my time as a Flatiron student are in the bag! I have officially learned enough, toiled and fiddled enough, and spent enough late nights and early mornings contemplating life and code to be considered an employable web developer. Self reflection (mostly) aside, I am very proud, humbled, and most of all excited to have reached this point. This project was far from easy, and I have definitely learned more from it than any prior project or lesson. I now feel that I have a solid understanding of what developing a functional application, from inception to fruiton, is truly like. For a time in the development process, it seemed all I could do was hit roadblock after roadblock, insurmountable obstacle after insurmountable obstacle, and I genuinely doubted that I would be able to complete this project in any reasonable way. However, now that I stand triumphant and look back on it, I see and truly understand that this all part of the process. Coding is in many ways a test of willpower, and holding strong reaps infinite rewards. So, before I bore you to death with my  victorious musings, here is a bit about my React/Redux final project. 
		My application is essentially a simple accounting database. A user can input their financial information, including any bank accounts, credit cards, investments, notable assets, and outstanding loans, and receive an up to date view of their financial picture and net worth. All of the aforementioned components correspond to a model on the Rails backend, and to a container with an input form, a display page, and some actions and reducers on the client side. Queries are made to the server via fetch, and are broadly defined in three categories: user actions, posting of new resources, and retrieval of existing resources. 
		Of the three, the user actions were by far the most difficult. Before knowing entirely what I was doing, I naively placed Devise on the back end to aid in my authentication needs. This necessitated various workarounds and schemes to ensure that I could sign a user up and log a user in the front end, and persist this user's data. If I had this to do over, I would certainly forego Devise in a full stack application, and implement a much simpler authentication scheme. 
		Next, there were the POST actions. From the homepage, a user can navigate to the forms for adding any of the resources that pertain to his/her financial picture. Again, hoops had to be jumped through to allow posting to the Rails API, particularly because everything tends to be just a bit more complicated in AWS Cloud9, but this exercise seemed simple after the nightmare of user authentication. 
		Finally, there were the comparatively simple GET requests to the server side, used to retrieve a user's financial information and save it to the state.  If the whole project had gone as smoothly as this part... but I digress.  Ultimately, the challenges faced in this project have made me a better and far more confident developer, and I am genuinely excited for what the future holds. 
