---
layout: post
title:      "Sinatra Project: Fantasy Football"
date:       2017-12-05 23:05:47 -0500
permalink:  sinatra_project_fantasy_football
---


   I must start by saying how vastly different of an I experience I had working on my second portfolio project, as compared with the first. For my cli app, I spent hours thinking of potential ideas, weighing their pros and cons, and ultimately deciding against them. However, for my Sinatra app, I had my seed idea before it was even time to begin the project, and I was confident that the material I had been learning would lend itself well to a fantasy football app. Part of this, of course, went hand in hand with having more experience working on larger projects, and thus knowing better what would work and what would not. But part of it, I think, also had to do with the pure, simple beauty of Sinatra itself. In any case, with this decisive start, I was on a roll. The actual planning and building of the app went equally smoothly,  with most everything working exactly as I had envisioned. 
		Again, much of this, I believe, is thanks to Sinatra's simple, easy interface. I was able to build the basic structure of the app entirely from files, folders, and code from previous labs. From there on, thanks to the restful route structure and numerous conventions, much of the grunt work of the project came down to a simple process of copying and pasting, then changing a few relevant details here and there. Therefore, unlike my cli project, where at least half the battle was in figuring out architectural details, I was free in this case to let my creativity run wild, focusing mainly on the features I wanted the app to have and the way I wanted a user to interact with it. I heard Avi say in one of the videos that this process is more akin to "designing" than "programming," and that is exactly what I found to be the case.  I was not so much building a structure, but rather designing a layout and an asethetic. In fact, that is one of my main takeaways from  Sinatra: it essentially abstracts away the "building" process through convention, and leaves the programmer free to focus all their time and energy on the product, not the process. In that sense, I began to truly understand what the intructors mean when they say Sinatra makes designing web apps "easy" and "quick," and furthermore, with the promise that Rails makes this process even more painless, I cannot wait to learn and see what types of apps I can create with it! 
		All that being said, let me tell a little bit about the fantasy football app itself. It is, in my opinion, completely intuitive. I began the design process by thinking about all the models and associations a fantasy football league would need, and they seemed immediately obvious. A league should have many teams, and many users through these teams. A team should belong to a user and a league. A game should belong to many teams (or two, to be exact), to a league, and to many (two) users, through their teams. A player should belong to a team, and through that team, a user. As I began building these associations, I intuitively designed routes that I thought would make sense to a user. 
		The feature I am most proud of is the app's homepage. Instead of routing immediately to an index page, where a user can sign up or log in, upon entering the app, the user is routed to a page showing all the current leagues, with links to view each individual league in detail. The user can click these links, and should he/she wish to join a given league, he is then routed to index page to sign up or log in, before being routed back to the leagues show page. I wanted the user to be able to see the app and some of its functionality without having to make an account, with the idea that this would attract more users to a real-world application than if they were immediately prompted to sign up on entry. 
		After signing up, the user can then create a team in a given league, and from there, they are routed to that team's show page, where they can view their roster and add players to their team.  Should they choose to add players, they are routed to a form to submit the player's name, position, and status (active or injured), then back to the team's show page, where they can add more players if they choose, or go back to the league homepage. If a player is injured, the user can visit the player's show page and drop the player from his/her team, which routes back to the team show page.
		Should a user visit the leagues homepage and not find a league they want to join, they can create  a new league if logged in, giving them immediate propietorship of the league, in the form of the league's manager_id attribute.  As manager, they have the sole right to create games within the league, which consists of nothing more than inputing the winning teams id and the losing teams id in the create game form.  This then routed back to the individual league's show page, which includes updated standings for the league. 
		This, then, is my main disappointment with the app's functionality: it stores the results of a game, but cannot serve to actually "play" the game. It does not have the ability to record point totals or communicate with real NFL goings-on, but can instead only store and act on data. This, of course, was the goal of the project, so in that sense, I am not disappointed in my effort, but I can see extending the app in the future to scrape an API and include a database of "real" NFL players, and ultimately, to include a draft and an actual game feature, with live, updated scoring. Nonetheless, I feel the CRUD app I have built is a good skeleton for this later functionality, and I am proud of its design, layout, and the things it does do.
