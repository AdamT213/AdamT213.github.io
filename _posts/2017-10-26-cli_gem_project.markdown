---
layout: post
title:      "CLI Gem Project"
date:       2017-10-26 15:55:32 -0400
permalink:  cli_gem_project
---


   Today I completed the week-long odyssey that was my Cli data gem project, which also happened to be my first official, self-made application. So, I guess I am now officially a programmer! Woot woot! Before I dive into the technical specs, allow me to vent for a second. I am ultimately satisfied with the gem I made, as I feel it is an accurate representation of the skills I have amassed to this point. That being said, I have to say that the project was highly frustrating (as I would, could and should have expected my first foray into unsupervised coding would be), and I must confess myself slightly disappointed in its outcome. What I ended up making is a simple interface that scrapes data from a website explaining the rules of poker, and shows a user the valid poker hands, by rank, and a sample of each one. This satisfies the project requirements as I understand them, but it seems a bit dull to me, because it does not do anything that could not be done from the webpage itself. Obviously, I was not expecting my first project to be revolutionary or groundbreaking, but I at least hoped that it might serve a unique function in some small way. When I first read the project requirements, I was immediately drawn to the idea of an app that scrapes several streaming platforms, e.g. Netflix, Amazon Prime, Hulu, etc., and allows a user to compare their content in several categories. I liked this idea mainly because, while it seemed small and manageable, it served a function that was genuinely useful to me, whether or not anyone else in the world would find it to be so. However, after floundering with this idea for a day or so, I quickly realized that all of the heavy javascript and many requests to the server on each of these pages would make this a massive undertaking, far beyond my current technical capabilities, and so opted to shelve this idea and go with the simpler poker hand model. I look forward to continuing to expand my knowledge so that, in the future, I can work on this and grander projects, and I feel that, discouraging as it may have been, having to adjust the scope of my vision to accommodate my current abilities was one of the best learning experiences of my life so far. And, like I said, I am ultimatley proud of the concession-app I did end up making. So, without further ado, here is a general walkthrough of my Poker Hands CLI Gem. 
	 Firstly, let me say that the page I scraped can be found at this url: http://www.cardplayer.com/rules-of-poker/hand-rankings. After struggling so mightily with the aforementioned complex pages, I looked for one that seemed to have a simple, HTML-focused layout, and this one fit the bill. I opened a pry console, peered inside a few divs to make sure they contained what I thought they contained, and I was set. 
	 The first task I undertook, and the main challenge of the program, was finding exactly how to scrape the page. After seeing that the hand descriptions were not contained in any class or id, indeed, that they seemed to be simply typed into the page itself, I quickly saw that there were two main pieces of data that could be scraped by familiar methods: the handnames and sample card images. Soon after, I realized that the perfect page I had chosen was indeed wonky in its own way. Oh no! The sample cards associated with each hand were not contained in some larger parent class with the handnames, but were instead all contained in one large parent class of their own. This meant that getting a handname to recognize its sample cards was going to be a challenge. 
	 Ala the student scraper lab, I attempted to make an array of hashes, each hash containing a handname and its associated sample cards. However, because of the previously mentioned parent class issue, I soon hit a dead end, wherein each hash contained the handname followed by all the sample cards, not just those associated with it. After consulting the stack overflow community for guidance, I ended up slightly modifying my original method to include a #zip method, which I now know can be used to pair disparate elements in a nested array. 
	 With the hard part done, I instantiated objects in the hand class by closely following the model set forth in the student scraper lab. It was initially confusing trying to get the objects to recognize one another, and I made a mess of require statements in each class, before realizing, ala the daily deal example, that the main executable file was the only one that needed to recognize all other files. With this realization, it was smooth sailing, and I quickly had a working cli. 
	 I ran into two more major issues. First, the image urls that I had scraped from the page were relative pathnames, from the page's perspective, and were thus useless as links. To remedy this, in my #display_hand_examples method, I added the page's main url before each one, which created a viable, functional link in the terminal output. The only problem: It didn't link to anything! The page where each of these images was supposed to live had either been moved or never existed at all. 
Ultimately, I chalked this up to the wonkiness of the page and accepted it; after all, I had built a method that should have worked if the page layout had been more sensible, and I felt that what I built accurately demonstrated mastery of the concepts involved. It may not be perfect, but I feel this method is as good as it can be. 
  The second major issue was also related to the page's layout. The scraper method worked perfectly for each handname except for hand #2, the straight flush, whose images were not contained in the same class as all the rest, no doubt by some mistake. In an effort to save the program from breaking, I added a conditional to the #display_hand_examples method, in effect, showing a description of the straight flush in lieu of any image urls. In this way, I found solutions to all the major problems I faced, and was left with a working program.  
	So, as I can only reiterate, I am proud that I worked through the challenges the project presented, and created a working cli with very little external help. It is not perfect, but I feel it appropriately conveys the spirit of the project, and moreso, that it is a reasonable demonstration of my current abilities as a programmer. Now, back to work!
